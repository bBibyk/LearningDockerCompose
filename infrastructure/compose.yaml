# Définition des réseaux
networks:
  api:
    driver: bridge # Réseau pour les services exposés à l'extérieur (reverse proxy + applications)
  data:
    driver: bridge # Réseau interne dédié aux services manipulant des données (MySQL, backups, PHPMyAdmin)
  sonar:
    driver: bridge # Réseau isolé pour la stack SonarQube (base Postgres + serveur Sonar)

# Définition des volumes Docker
volumes:
  data-persist: # Volume pour la persistance des données MySQL
  data-backups: # Volume pour la sauvegarde de la BD
    driver: local
    driver_opts:
      type: none
      device: ${BACKUPS_DISK_PATH} # Le chemin du disque de sauvegarde est défini dans une variable d'environnement du fichier .env
      o: bind # On monte un dossier local
  data-sonar-bd: # Volume pour stocker les données de la base Postgres utilisée par SonarQube
  data-sonar-app: # Volume pour stocker les fichiers applicatifs et les extensions de SonarQube


services:
  mysql-annuaire:
    image: mysql:8.0
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=test
    networks:
      - data
    volumes:
      - data-persist:/var/lib/mysql
      - ./data_init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Conteneur pour la version 1 de l'application
  devops-v1:
    build:
      context: ./devops-image
      dockerfile: ./devops-dockerfile
    depends_on:
      mysql-annuaire:
        condition: service_healthy
    networks:
      - api
      - data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://devops-v1:8080/api/persons"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Conteneur pour la version 2 de l'application
  devops-v2:
    build:
      context: ./devops-image
      dockerfile: ./devops-dockerfile
    depends_on:
      mysql-annuaire:
        condition: service_healthy
    networks:
      - api
      - data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://devops-v2:8080/api/persons"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Conteneur pour le reverse proxy Nginx
  reverse-proxy:
    image: nginx:stable-alpine3.21 # Image Nginx sécurisé et stable
    volumes:
      - ./nginx_init/nginx.conf:/etc/nginx/nginx.conf # Configuration Nginx personnalisée
    ports:
      - "80:80" # Expose le proxy sur le port 80
    networks:
      - api
    depends_on: # Démarre après les deux versions de l'application
      - devops-v1
      - devops-v2

  phpmyadmin:
    image: phpmyadmin:5.2.2
    environment:
      - PMA_HOST=mysql-annuaire
    depends_on:
      mysql-annuaire:
        condition: service_healthy
    networks:
      - data
    ports:
      - "8080:80"

  # Conteneur pour les sauvegardes MySQL
  backups:
    build:
      context: ./backup-image # Image personnalisée
      dockerfile: ./backup-dockerfile
    depends_on:
      mysql-annuaire:
        condition: service_healthy
    networks:
      - data
    volumes:
      - data-backups:/backups # Sauvegardes stockées sur le volume dédié

  # Conteneur pour la base de données SonarQube
  sonar-db:
    image: postgres
    environment:
      - POSTGRES_USER=sonar
      - POSTGRES_PASSWORD=sonar
      - POSTGRES_DB=sonar
    networks:
      - sonar
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sonar -d sonar"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - data-sonar-bd:/var/lib/postgresql/data

  # Conteneur pour SonarQube
  sonarqube:
    image: sonarqube
    depends_on:
      sonar-db:
        condition: service_healthy
    ports:
      - "9000:9000"
    environment:
      - SONAR_JDBC_URL=jdbc:postgresql://sonar-db:5432/sonar
      - SONAR_JDBC_USERNAME=sonar
      - SONAR_JDBC_PASSWORD=sonar
    volumes:
      - data-sonar-app:/opt/sonarqube
    networks:
      - sonar